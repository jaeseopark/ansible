---
- name: Transform apps list into objects with name, ip, port, domain, and overrides
  set_fact:
    app_configs: >-
      {%- set result = [] -%}
      {%- for app in apps -%}
        {%- if app.deployed_domain is defined and 'host' in app and 'port' in app -%}
          {%- set base_config = {
            'name': app.name,
            'ip': hostvars[app.host].wg_ip,
            'port': app.port,
            'domain': app.deployed_domain,
            'is_default': app.is_default | default(false)
          } -%}
          {%- set final_config = base_config | combine((app_overrides | default({}))[app.name] | default({}), recursive=True) -%}
          {%- set _ = result.append(final_config) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ result }}

- name: Validate that only one app is marked as default per domain
  assert:
    that:
      - item[1] | length == 1
    fail_msg: "Exactly one app per domain must have is_default set to true. Domain '{{ item[0] }}' has {{ item[1] | length }} default apps: {{ item[1] | map(attribute='name') | list | join(', ') }}."
    success_msg: "Validation passed: exactly one app is marked as default for domain '{{ item[0] }}'."
  loop: >-
    {{
      apps | selectattr('is_default', 'defined') | selectattr('is_default', 'equalto', true) | selectattr('deployed_domain', 'defined') 
      | groupby('deployed_domain') | list
    }}
  loop_control:
    label: "{{ item[0] }}"

- name: Validate that default apps are properly configured
  assert:
    that:
      - item.deployed_domain is defined
      - item.host is defined
      - item.port is defined
    fail_msg: "Default app '{{ item.name }}' for domain '{{ item.deployed_domain }}' must have deployed_domain, host, and port defined."
    success_msg: "Validation passed: default app '{{ item.name }}' is properly configured."
  loop: "{{ apps | selectattr('is_default', 'defined') | selectattr('is_default', 'equalto', true) | list }}"
  loop_control:
    label: "{{ item.name }} ({{ item.deployed_domain | default('no domain') }})"

- name: Install nginx
  package:
    name: nginx
    state: present

- name: Copy nginx configuration
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    backup: yes
  notify: restart nginx

- name: Ensure nginx is running and enabled
  service:
    name: nginx
    state: started
    enabled: yes
